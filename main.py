"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞,
–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.
–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ —É—á–∏—Ç—å —Å–ª–æ–≤–∞ –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö:
—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.
"""

import random
import configparser
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from connect_with_db import words, users, user_words


def read_token_telegram():
    """
    –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram API
    –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ settings.ini.
    """
    config = configparser.ConfigParser()
    config.read("/home/mladinsky/Study/settings.ini")
    token_tg = config['TG']['TELEGRAM_TOKEN']
    return token_tg


print('Start telegram bot...')
state_storage = StateMemoryStorage()
token_bot = read_token_telegram()
bot = TeleBot(token_bot, state_storage=state_storage)
buttons = []


def show_hint(*lines):
    """ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    return '\n'.join(lines)


def show_target(data):
    """ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    """
    –ö–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è,
     —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤, –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ –æ–±—É—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –Ω–∏–º–∏.
    """
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –∫ –∏–∑—É—á–µ–Ω–∏—é ‚ûï'
    DELETE_WORD = '–£–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ –∏–∑ –∏–∑—É—á–µ–Ω–∏—èüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    LEARN_NEW = '–£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞'
    LEARN_SAVED = '–£—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞'
    BACK_TO_MODE = '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞'


class MyStates(StatesGroup):
    """
    –ö–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    –≤–≤–æ–¥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    target_word = State()
    translate_word = State()
    another_words = State()
    target_id = State()
    learning_mode = State()


@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /cards –∏ /start, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    if user_id not in users.get_known_users():
        user_name = (bot.get_chat(user_id)).first_name
        bot.send_message(user_id, f"Hello, {user_name}, let's study English...?")
        users.save_user(user_id, user_name)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if 'learning_mode' not in data:
            select_learning_mode(message)
        else:
            show_cards(message)


def select_learning_mode(message):
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    (–Ω–æ–≤—ã–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞) –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ learning_mode.
    """
    markup = types.ReplyKeyboardMarkup(row_width=2)
    learn_new_btn = types.KeyboardButton(Command.LEARN_NEW)
    learn_saved_btn = types.KeyboardButton(Command.LEARN_SAVED)
    markup.add(learn_new_btn, learn_saved_btn)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è:", reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.learning_mode, message.chat.id)


@bot.message_handler(func=lambda message: message.text in [Command.LEARN_NEW, Command.LEARN_SAVED])
def set_learning_mode(message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ show_cards(message)."""
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['learning_mode'] = message.text
    show_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def show_cards(message):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
     (–Ω–æ–≤—ã–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞) –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞.
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        learning_mode = data.get('learning_mode')
        if learning_mode == Command.LEARN_NEW:
            target_word, translate_word, others, target_id = words.get_word_from_words()
        elif learning_mode == Command.LEARN_SAVED:
            user_id = message.from_user.id
            target_word, translate_word, others, target_id = user_words.get_user_words(user_id)
        if not target_word:
            bot.send_message(message.chat.id,
                f"–£ –≤–∞—Å –º–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ = {user_words.count_user_words(user_id)}, "
                f"–¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞, "
                f"–¥–æ–±–∞–≤—å—Ç–µ –∫ –∏–∑—É—á–µ–Ω–∏—é –Ω–µ –º–µ–Ω—å—à–µ {10-user_words.count_user_words(user_id)} —Å–ª–æ–≤. "
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º - –£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞")
            select_learning_mode(message)
            return
    markup = types.ReplyKeyboardMarkup(row_width=2)
    global buttons
    buttons = []
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    back_to_mode_btn = types.KeyboardButton(Command.BACK_TO_MODE)
    buttons.extend([next_btn, add_word_btn, delete_word_btn, back_to_mode_btn])
    markup.add(*buttons)
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate_word}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate_word
        data['other_words'] = others
        data['target_id'] = target_id


@bot.message_handler(func=lambda message: message.text == Command.BACK_TO_MODE)
def back_to_mode(message):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é select_learning_mode –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞.
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if 'learning_mode' in data:
            del data['learning_mode']
    select_learning_mode(message)


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç create_cards –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏."""
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    """ –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–≤–∞ –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        user_id = message.from_user.id
        target_id = data['target_id']
        user_words.delete_word(user_id, target_id)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        user_id = message.from_user.id
        target_id = data['target_id']
        user_words.add_word(user_id, target_id)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)
    –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)
